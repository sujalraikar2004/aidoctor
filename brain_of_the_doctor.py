import base64
import os
from groq import Groq
import logging
from docx import Document
from docx.shared import Inches
import datetime

logging.basicConfig(level=logging.INFO)

def encode_image(image_path):
    try:
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')
    except Exception as e:
        logging.error(f"Image encoding failed: {str(e)}")
        return ""

def analyze_image_with_query(query, model, encoded_image):
    try:
        client = Groq(api_key=os.environ.get("GROQ_API_KEY"))
        
        messages = [{
            "role": "user",
            "content": [
                {"type": "text", "text": query},
                {"type": "image_url", "image_url": {
                    "url": f"data:image/jpeg;base64,{encoded_image}"
                }}
            ]
        }]

        response = client.chat.completions.create(
            model=model,
            messages=messages,
            temperature=0.2,
            max_tokens=500
        )
        return response.choices[0].message.content
    
    except Exception as e:
        logging.error(f"Vision API error: {str(e)}")
        return "Could not analyze image at this time"
    
def create_prescription(patient_query, doctor_response):
    try:
        # Create prescriptions directory if not exists
        os.makedirs("prescriptions", exist_ok=True)
        
        # Generate filename with timestamp
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"prescriptions/prescription_{timestamp}.docx"
        
        # Create or load existing document
        doc = Document()
        
        # Add heading
        doc.add_heading('AI Medical Prescription', 0)
        
        # Add patient information section
        doc.add_heading('Patient Information', level=1)
        doc.add_paragraph(f"Date: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # Add patient query
        doc.add_heading('Patient Concerns', level=2)
        doc.add_paragraph(patient_query)
        
        # Add medical analysis
        doc.add_heading('Medical Analysis', level=1)
        doc.add_paragraph(doctor_response)
        
        # Add footer
        doc.add_paragraph("\n\nThis prescription was generated by AI and should be verified by a licensed medical professional.")
        
        # Save document
        doc.save(filename)
        return filename
        
    except Exception as e:
        logging.error(f"Error creating prescription: {str(e)}")
        return None        